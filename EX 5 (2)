Problem statement- Sort Colors
Sort an array containing only 0s, 1s, and 2s (Dutch National Flag
Problem). Use a three-pointer approach to partition elements in O(n)
time and O(1) space. Edge cases include already sorted arrays and
arrays containing only one type of element.

#include <iostream>
#include <vector>

void sortColors(std::vector<int>& nums) {
    int low = 0;        
    int mid = 0;        
    int high = nums.size() - 1;

    while (mid <= high) {
        if (nums[mid] == 0) {
            std::swap(nums[low], nums[mid]);
            low++;
            mid++;
        } else if (nums[mid] == 1) {
            mid++;
        } else { // nums[mid] == 2
            std::swap(nums[mid], nums[high]);
            high--;
        }
    }
}

int main() {
    // Example usage
    std::vector<int> nums = {2, 0, 2, 1, 1, 0};
    
    sortColors(nums);

    // Output the sorted array
    for (int num : nums) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
